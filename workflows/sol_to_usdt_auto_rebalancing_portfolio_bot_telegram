{
  "name": "SOL to USDT Auto-Rebalancing Portfolio Bot (Telegram)",
  "nodes": [
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://app.afkcrypto.com/api/v1/wallets/balances?chain=solana",
        "options": {}
      },
      "id": "bae4fda8-6bfc-47a4-a3a4-af13b3aa56f8",
      "name": "Get SOL Balance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        448,
        0
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "TMb8pmWTMkxEjk1x",
          "name": "AFK_Crypto_API_Key"
        }
      }
    },
    {
      "parameters": {
        "chatId": "CHAT_ID",
        "text": "=Rebalanced: Swapped {{ $('Leave 20 SOL').item.json.amount }} SOL ‚Üí USDC",
        "additionalFields": {}
      },
      "id": "e9255725-dcc3-4cec-bd72-500241fc50d1",
      "name": "Telegram Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1344,
        0
      ],
      "webhookId": "a4c05835-34b8-4c69-ba72-efbbb4c720b8",
      "credentials": {
        "telegramApi": {
          "id": "P5PVPL3oGa7q3l59",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.afkcrypto.com/api/v1/trade/swap",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Idempotency-Key",
              "value": "={{ $execution.id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chain",
              "value": "={{ $('Edit Fields').item.json.chain }}"
            },
            {
              "name": "fromToken",
              "value": "={{ $('Edit Fields').item.json.fromToken }}"
            },
            {
              "name": "toToken",
              "value": "={{ $('Edit Fields').item.json['toToken (USDT)'] }}"
            },
            {
              "name": "amount",
              "value": "={{ $('Leave 20 SOL').item.json.amount }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        0
      ],
      "id": "340610c4-74ad-4797-8ecd-3b185b589901",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "TMb8pmWTMkxEjk1x",
          "name": "AFK_Crypto_API_Key"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9ace21f-260a-4811-bab1-5b8b47261de5",
              "name": "chain",
              "value": "solana",
              "type": "string"
            },
            {
              "id": "495c05c6-0d33-4609-b78b-79b0882cdaab",
              "name": "fromToken",
              "value": "So11111111111111111111111111111111111111112",
              "type": "string"
            },
            {
              "id": "c3272e97-0c92-47c8-bf25-a30102c17d5a",
              "name": "toToken (USDT)",
              "value": "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        0
      ],
      "id": "c444a1f4-217f-4fbd-8a4b-a98411f86161",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "a0a1f15e-a51e-4df5-a5e1-a9e6e427923f",
      "name": "12AM"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "635a42d1-755f-4d98-9b7f-fcc75a79d2df",
              "leftValue": "={{ $json.swapNeeded }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        896,
        0
      ],
      "id": "ab9aadf3-c62c-464d-82e5-6d9cf510bf09",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Get balances from AFK Crypto API\nconst balances = $json.balances || [];\n\n// Find SOL balance\nconst solBalance = balances.find(b => b.tokenSymbol === 'SOL');\nconst solLamports = solBalance ? parseFloat(solBalance.amount) : 0;\n\n// Define minimum SOL to keep (20 SOL in lamports)\nconst targetLamports = 20 * 1e9;  // 20 SOL\n\n// Calculate swap amount (only excess beyond 20 SOL)\nconst swapLamports = solLamports > targetLamports\n  ? solLamports - targetLamports\n  : 0;\n\n// Output object\nreturn [\n  {\n    json: {\n      fromToken: \"SOL\",\n      toToken: \"USDT\",   // you can change to \"USDC\"\n      amount: swapLamports,               // ‚úÖ directly mappable\n      solBalanceLamports: solLamports,    // raw lamports\n      solBalanceReadable: solLamports / 1e9,  // in SOL\n      targetLamports: targetLamports,\n      targetReadable: targetLamports / 1e9,\n      swapReadable: swapLamports / 1e9,   // in SOL\n      swapNeeded: swapLamports > 0\n    }\n  }\n];\n"
      },
      "id": "953662b0-094a-495a-a8dd-a4d7dc73f77c",
      "name": "Leave 20 SOL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        672,
        0
      ]
    },
    {
      "parameters": {
        "content": "Try It Out!\n\nThis workflow, SOL to USDT Auto-Rebalancing Portfolio Bot (Telegram), runs daily at 12:00 AM. It functions as an automated SOL balance optimizer, designed to maintain a minimum reserve of 20 SOL in your Solana wallet while automatically converting any excess into USDT using the AFK Crypto Swap API. Once the swap is completed, it delivers a transaction summary to your Telegram chat, ensuring you always know when and how much was rebalanced ‚Äî all without lifting a finger.\n\nHow It Works\n\n12AM Trigger\nRuns every day at midnight, initiating your automatic rebalancing routine to protect your portfolio and maintain liquidity consistency.\n\nEdit Fields\nPredefines key parameters for API communication:\n\nchain ‚Üí Solana\n\nfromToken ‚Üí SOL\n\ntoToken ‚Üí USDT (contract: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB)\nThese constants are passed into later HTTP requests for clean and modular configuration.\n\nGet SOL Balance\nRetrieves your wallet‚Äôs latest Solana balance through:\nGET https://api.afkcrypto.com/v1/wallets/balances?chain=solana\nThe response includes all tokens in your Solana wallet, which are filtered to isolate the SOL balance.\n\nLeave 20 SOL (Code Node)\nRuns a JavaScript calculation to determine how much SOL is safe to swap:\n\nConverts balances into lamports (smallest SOL unit).\n\nSets a minimum target of 20 SOL.\n\nCalculates the excess amount above 20 SOL.\n\nReturns both raw lamports and human-readable SOL values.\n\nAdds a flag swapNeeded = true if the wallet holds more than 20 SOL.\n\nIf Condition\nEvaluates whether a swap is required:\n\n‚úÖ True ‚Üí Executes the SOL ‚Üí USDT swap.\n\n‚ùå False ‚Üí Ends workflow (balance within target range).\n\nHTTP Request (AFK Crypto Swap API)\nExecutes the token swap when needed via:\nPOST https://api.afkcrypto.com/v1/trade/swap\nPayload includes:\n\nchain: solana\n\nfromToken: SOL\n\ntoToken: USDT\n\namount: calculated in lamports\n\nIdempotency-Key: ensures no duplicate swaps\nThis request performs the actual conversion of surplus SOL into USDT securely.\n\nTelegram Notification\nSends a message to your Telegram chat once the swap is completed.\nExample:\n\nüí± Rebalanced: Swapped 2.45 SOL ‚Üí USDT\nThis provides instant visibility into your portfolio automation results.\n\nHow to Use\n\nSet Up Credentials\n\nAdd your AFK Crypto API Key under HTTP Header Auth in n8n.\n\nConnect your Telegram Bot using your bot token under Telegram API credentials.\n\nConfigure Parameters\n\nReplace \"CHAT_ID\" in the Telegram node with your actual chat ID.\n\nVerify that your Solana wallet is correctly linked in AFK Crypto.\n\nActivate the Workflow\n\nEnable the Schedule Trigger to run at 12:00 AM daily.\n\nRun a manual test once to confirm swap execution and Telegram delivery.\n\n(Optional) Extend This Workflow\n\nAdd Discord Alerts ‚Äî Cross-post swap results to your Discord server for team visibility.\n\nLog Transactions ‚Äî Store daily swap details in Notion, Google Sheets, or n8n Data Store.\n\nAdd USD Conversion ‚Äî Use CoinGecko API to include real-time USD values of swaps.\n\nSmart Limits ‚Äî Add conditions to pause swaps when SOL price drops below a threshold.\n\nMulti-Chain Balancing ‚Äî Extend logic to include other chains (e.g., Ethereum or Base).\n\nRequirements\n\nn8n instance with internet access.\n\nAFK Crypto account + API key ‚Üí www.afkcrypto.com\n.\n\nTelegram Bot with proper credentials and permissions.\n\nSolana wallet with sufficient SOL balance connected to AFK Crypto.\n\nSummary\n\nüìä Keep your Solana wallet balanced automatically.\nThis workflow ensures that your wallet always retains at least 20 SOL, while any excess is safely converted to USDT for stable storage.\nCombined with Telegram alerts, it provides a fully autonomous, transparent, and risk-mitigated approach to managing your SOL portfolio ‚Äî all in real-time, without manual checks.",
        "height": 2256,
        "width": 1136
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1200,
        -1024
      ],
      "typeVersion": 1,
      "id": "2a8d7428-f858-4c83-b827-9c30a5c3fce4",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Get SOL Balance": {
      "main": [
        [
          {
            "node": "Leave 20 SOL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Get SOL Balance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "12AM": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Leave 20 SOL": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c9a89322-f79e-4b52-9caf-2a0d78b131eb",
  "meta": {
    "instanceId": "c4eae34af81eeff658410c97c38d8a485e4c73ba5cea5b25eef189aa5e5a73b9"
  },
  "id": "9JSfNExGkU0DHMgR",
  "tags": []
}